//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "PlayerPage.xaml.h"
#include "App.xaml.h"
#include "MainPage.xaml.h"
#include "SearchPage.xaml.h"
#include "XamlBindingInfo.g.hpp"
#include "PlayerPage.g.hpp"
#include "App.g.hpp"
#include "MainPage.g.hpp"
#include "SearchPage.g.hpp"

template<typename T>
::Platform::Object^ ActivateType()
{
    return ref new T;
}

template<typename TInstance, typename TItem>
void CollectionAdd(::Platform::Object^ instance, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Append((TItem)item);
}

template<typename TInstance, typename TKey, typename TItem>
void DictionaryAdd(::Platform::Object^ instance, ::Platform::Object^ key, ::Platform::Object^ item)
{
    safe_cast<TInstance^>(instance)->Insert((TKey)key, (TItem)item);
}

template<typename T>
::Platform::Object^ FromStringConverter(::XamlTypeInfo::InfoProvider::XamlUserType^ userType, ::Platform::String^ input)
{
    return ref new ::Platform::Box<T>((T)userType->CreateEnumUIntFromString(input));
}

template<typename TDeclaringType, typename TargetType>
::Platform::Object^ GetAttachableMember_IsEnabled(::Platform::Object^ instance)
{
    return TDeclaringType::GetIsEnabled(safe_cast<TargetType^>(instance));
}

template<typename TDeclaringType, typename TargetType>
::Platform::Object^ GetAttachableMember_ActualWidth(::Platform::Object^ instance)
{
    return TDeclaringType::GetActualWidth(safe_cast<TargetType^>(instance));
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_YoutubeMiniatures(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->YoutubeMiniatures;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_LargeThumbnail(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->LargeThumbnail;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_SmallThumbnail(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->SmallThumbnail;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_Title(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->Title;
}

template<typename TDeclaringType>
::Platform::Object^ GetReferenceTypeMember_VideoId(::Platform::Object^ instance)
{
    return safe_cast<TDeclaringType^>(instance)->VideoId;
}

template<typename TDeclaringType, typename TTargetType, typename TValue>
void SetAttachableMember_IsEnabled(::Platform::Object^ instance, ::Platform::Object^ value)
{
    TDeclaringType::SetIsEnabled(safe_cast<TTargetType^>(instance), (TValue)value);
}

template<typename TDeclaringType, typename TTargetType, typename TValue>
void SetAttachableMember_ActualWidth(::Platform::Object^ instance, ::Platform::Object^ value)
{
    TDeclaringType::SetActualWidth(safe_cast<TTargetType^>(instance), (TValue)value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_LargeThumbnail(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->LargeThumbnail = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_SmallThumbnail(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->SmallThumbnail = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_Title(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->Title = safe_cast<TValue^>(value);
}

template<typename TDeclaringType, typename TValue>
void SetReferenceTypeMember_VideoId(::Platform::Object^ instance, ::Platform::Object^ value)
{
    safe_cast<TDeclaringType^>(instance)->VideoId = safe_cast<TValue^>(value);
}

struct TypeInfo
{
    PCWSTR  typeName;
    PCWSTR contentPropertyName;
    ::Platform::Object^ (*activator)();
    void (*collectionAdd)(::Platform::Object^, ::Platform::Object^);
    void (*dictionaryAdd)(::Platform::Object^, ::Platform::Object^, ::Platform::Object^);
    ::Platform::Object^ (*fromStringConverter)(::XamlTypeInfo::InfoProvider::XamlUserType^, ::Platform::String^);
    int     baseTypeIndex;
    int     firstMemberIndex;
    int     firstEnumValueIndex;
    ::Windows::UI::Xaml::Interop::TypeKind kindofType;
    bool    isLocalType;
    bool    isSystemType;
    bool    isReturnTypeStub;
    bool    isBindable;
};

TypeInfo TypeInfos[] = 
{
    //   0
    L"Object", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   1
    L"Double", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   2
    L"String", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   3
    L"Boolean", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   4
    L"youtube_backgrounder.MainPage", L"",
    &ActivateType<::youtube_backgrounder::MainPage>, nullptr, nullptr, nullptr,
    5, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   5
    L"Windows.UI.Xaml.Controls.Page", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //   6
    L"youtube_backgrounder.PlayerPage", L"",
    &ActivateType<::youtube_backgrounder::PlayerPage>, nullptr, nullptr, nullptr,
    5, // Windows.UI.Xaml.Controls.Page
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   7
    L"youtube_backgrounder.SizeChange", L"",
    &ActivateType<::youtube_backgrounder::SizeChange>, nullptr, nullptr, nullptr,
    10, // Windows.UI.Xaml.DependencyObject
    0, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //   8
    L"youtube_backgrounder.DataSource", L"",
    &ActivateType<::youtube_backgrounder::DataSource>, nullptr, nullptr, nullptr,
    0, // Object
    2, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, true, 
    //   9
    L"youtube_backgrounder.SearchPage", L"",
    &ActivateType<::youtube_backgrounder::SearchPage>, nullptr, nullptr, nullptr,
    5, // Windows.UI.Xaml.Controls.Page
    3, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  10
    L"Windows.UI.Xaml.DependencyObject", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    3, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  11
    L"Windows.UI.Xaml.Controls.UserControl", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1,
    3, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, true,  false, false,
    //  12
    L"youtube_backgrounder.YoutubeMiniatureData", L"",
    nullptr, nullptr, nullptr, nullptr,
    0, // Object
    3, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, true, 
    //  13
    L"youtube_backgrounder.ItemWidthStateConverter", L"",
    &ActivateType<::youtube_backgrounder::ItemWidthStateConverter>, nullptr, nullptr, nullptr,
    0, // Object
    7, 0, ::Windows::UI::Xaml::Interop::TypeKind::Custom,
    true,  false, false, false,
    //  14
    L"Windows.Foundation.Collections.IVector`1<youtube_backgrounder.YoutubeMiniatureData>", L"",
    nullptr, &CollectionAdd<::Windows::Foundation::Collections::IVector<::youtube_backgrounder::YoutubeMiniatureData^>, ::youtube_backgrounder::YoutubeMiniatureData^>, nullptr, nullptr,
    -1,
    7, 0, ::Windows::UI::Xaml::Interop::TypeKind::Metadata,
    false, false, true,  false,
    //  Last type here is for padding
    L"", L"",
    nullptr, nullptr, nullptr, nullptr,
    -1, 
    7, 0,::Windows::UI::Xaml::Interop::TypeKind::Custom,
    false, false, false, false,
};

UINT TypeInfoLookup[] = { 
      0,   //   0
      0,   //   1
      0,   //   2
      0,   //   3
      0,   //   4
      0,   //   5
      0,   //   6
      3,   //   7
      4,   //   8
      4,   //   9
      4,   //  10
      4,   //  11
      4,   //  12
      4,   //  13
      4,   //  14
      4,   //  15
      4,   //  16
      4,   //  17
      4,   //  18
      4,   //  19
      4,   //  20
      4,   //  21
      4,   //  22
      4,   //  23
      4,   //  24
      4,   //  25
      4,   //  26
      4,   //  27
      4,   //  28
      4,   //  29
      6,   //  30
      6,   //  31
     10,   //  32
     11,   //  33
     11,   //  34
     11,   //  35
     11,   //  36
     12,   //  37
     12,   //  38
     12,   //  39
     12,   //  40
     12,   //  41
     13,   //  42
     13,   //  43
     13,   //  44
     14,   //  45
     14,   //  46
     14,   //  47
     14,   //  48
     14,   //  49
     14,   //  50
     14,   //  51
     14,   //  52
     14,   //  53
     14,   //  54
     14,   //  55
     14,   //  56
     14,   //  57
     14,   //  58
     14,   //  59
     14,   //  60
     14,   //  61
     14,   //  62
     14,   //  63
     14,   //  64
     14,   //  65
     14,   //  66
     14,   //  67
     14,   //  68
     14,   //  69
     14,   //  70
     14,   //  71
     14,   //  72
     14,   //  73
     14,   //  74
     14,   //  75
     14,   //  76
     14,   //  77
     14,   //  78
     14,   //  79
     14,   //  80
     14,   //  81
     14,   //  82
     14,   //  83
     15,   //  84
};

struct MemberInfo 
{
    PCWSTR shortName;
    ::Platform::Object^ (*getter)(::Platform::Object^);
    void (*setter)(::Platform::Object^, ::Platform::Object^);
    int typeIndex;
    int targetTypeIndex;
    bool isReadOnly;
    bool isDependencyProperty;
    bool isAttachable;
};

MemberInfo MemberInfos[] = 
{
    //   0 - youtube_backgrounder.SizeChange.IsEnabled
    L"IsEnabled",
    &GetAttachableMember_IsEnabled<::youtube_backgrounder::SizeChange, ::Windows::UI::Xaml::DependencyObject>,
    &SetAttachableMember_IsEnabled<::youtube_backgrounder::SizeChange, ::Windows::UI::Xaml::DependencyObject, ::Platform::Boolean>,
    3, // Boolean
    10, // Windows.UI.Xaml.DependencyObject
    false, false, true, 
    //   1 - youtube_backgrounder.SizeChange.ActualWidth
    L"ActualWidth",
    &GetAttachableMember_ActualWidth<::youtube_backgrounder::SizeChange, ::Windows::UI::Xaml::DependencyObject>,
    &SetAttachableMember_ActualWidth<::youtube_backgrounder::SizeChange, ::Windows::UI::Xaml::DependencyObject, ::default::float64>,
    1, // Double
    10, // Windows.UI.Xaml.DependencyObject
    false, false, true, 
    //   2 - youtube_backgrounder.DataSource.YoutubeMiniatures
    L"YoutubeMiniatures",
    &GetReferenceTypeMember_YoutubeMiniatures<::youtube_backgrounder::DataSource>,
    nullptr,
    14, // Windows.Foundation.Collections.IVector`1<youtube_backgrounder.YoutubeMiniatureData>
    -1,
    true,  false, false,
    //   3 - youtube_backgrounder.YoutubeMiniatureData.LargeThumbnail
    L"LargeThumbnail",
    &GetReferenceTypeMember_LargeThumbnail<::youtube_backgrounder::YoutubeMiniatureData>,
    &SetReferenceTypeMember_LargeThumbnail<::youtube_backgrounder::YoutubeMiniatureData, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //   4 - youtube_backgrounder.YoutubeMiniatureData.SmallThumbnail
    L"SmallThumbnail",
    &GetReferenceTypeMember_SmallThumbnail<::youtube_backgrounder::YoutubeMiniatureData>,
    &SetReferenceTypeMember_SmallThumbnail<::youtube_backgrounder::YoutubeMiniatureData, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //   5 - youtube_backgrounder.YoutubeMiniatureData.Title
    L"Title",
    &GetReferenceTypeMember_Title<::youtube_backgrounder::YoutubeMiniatureData>,
    &SetReferenceTypeMember_Title<::youtube_backgrounder::YoutubeMiniatureData, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
    //   6 - youtube_backgrounder.YoutubeMiniatureData.VideoId
    L"VideoId",
    &GetReferenceTypeMember_VideoId<::youtube_backgrounder::YoutubeMiniatureData>,
    &SetReferenceTypeMember_VideoId<::youtube_backgrounder::YoutubeMiniatureData, ::Platform::String>,
    2, // String
    -1,
    false, false, false,
};

PCWSTR GetShortName(PCWSTR longName)
{
    PCWSTR separator = wcsrchr(longName, '.');
    return separator != nullptr ? separator + 1: longName;
}

TypeInfo* GetTypeInfo(::Platform::String^ typeName)
{
    int typeNameLength = typeName->Length();
    if (typeNameLength < _countof(TypeInfoLookup) - 1)
    {
        for (UINT i = TypeInfoLookup[typeNameLength]; i < TypeInfoLookup[typeNameLength+1]; i++)
        {
            if (typeName == ::Platform::StringReference(TypeInfos[i].typeName))
            {
                return &TypeInfos[i];
            }
        }
    }
    return nullptr;
}

MemberInfo* GetMemberInfo(::Platform::String^ longMemberName)
{
    for (int lastDotIndex = longMemberName->Length(); lastDotIndex >= 0; lastDotIndex--)
    {
        if (longMemberName->Data()[lastDotIndex] == '.')
        {
            TypeInfo* pTypeInfo = GetTypeInfo(ref new ::Platform::String(longMemberName->Data(), lastDotIndex));
            TypeInfo* pNextTypeInfo = pTypeInfo + 1;
            if (pTypeInfo)
            {
                PCWSTR shortMemberName = GetShortName(longMemberName->Data());
                for (int i = pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
                {
                    if (wcscmp(shortMemberName, MemberInfos[i].shortName) == 0)
                    {
                        return &MemberInfos[i];
                    }
                }
            }
            break;
        }
    }
    return nullptr;
}

::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        auto otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
        _otherProviders = otherProviders;
    }
    return _otherProviders;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    TypeInfo* pTypeInfo = GetTypeInfo(typeName);
    TypeInfo* pNextTypeInfo = pTypeInfo + 1;
    if (pTypeInfo == nullptr || pNextTypeInfo == nullptr)
    {
        return nullptr;
    }
    else if (pTypeInfo->isSystemType)
    {
        return ref new ::XamlTypeInfo::InfoProvider::XamlSystemBaseType(typeName);
    }
    else
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(
            this, 
            ::Platform::StringReference(pTypeInfo->typeName), 
            this->GetXamlTypeByName(::Platform::StringReference(pTypeInfo->baseTypeIndex >= 0 ? TypeInfos[pTypeInfo->baseTypeIndex].typeName : L"")));
        userType->KindOfType = pTypeInfo->kindofType;
        userType->Activator = pTypeInfo->activator;
        userType->CollectionAdd = pTypeInfo->collectionAdd;
        userType->DictionaryAdd = pTypeInfo->dictionaryAdd;
        userType->FromStringConverter = pTypeInfo->fromStringConverter;
        userType->ContentPropertyName = ::Platform::StringReference(pTypeInfo->contentPropertyName);
        userType->IsLocalType = pTypeInfo->isLocalType;
        userType->IsReturnTypeStub = pTypeInfo->isReturnTypeStub;
        userType->IsBindable = pTypeInfo->isBindable;
        int nextMemberIndex = pTypeInfo->firstMemberIndex;
        for (int i=pTypeInfo->firstMemberIndex; i < pNextTypeInfo->firstMemberIndex; i++)
        {
            userType->AddMemberName(::Platform::StringReference(MemberInfos[i].shortName));
            nextMemberIndex++;
        }
        return userType;
    }
}

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = nullptr;
    MemberInfo* pMemberInfo = GetMemberInfo(longMemberName);
    if (pMemberInfo != nullptr)
    {
        xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(
            this,
            ::Platform::StringReference(pMemberInfo->shortName),
            ::Platform::StringReference(TypeInfos[pMemberInfo->typeIndex].typeName));
        xamlMember->Getter = pMemberInfo->getter;
        xamlMember->Setter = pMemberInfo->setter;
        xamlMember->TargetTypeName = pMemberInfo->targetTypeIndex >= 0 ? ::Platform::StringReference(TypeInfos[pMemberInfo->targetTypeIndex].typeName) : L"";
        xamlMember->IsReadOnly = pMemberInfo->isReadOnly;
        xamlMember->IsDependencyProperty = pMemberInfo->isDependencyProperty;
        xamlMember->IsAttachable = pMemberInfo->isAttachable;
    }
    return xamlMember;
}

